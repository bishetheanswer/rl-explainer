from google import genai
from google.genai import types
from rich.columns import Columns
from rich.console import Console
from rich.panel import Panel

from rl_explainer import config

BREAKOUT_RAW_PROMPT = """
This is a video of an already trained reinforcement learning
agent playing an Atari game.
Now I'm going to give you some details about the game:

    - Environment: You move a paddle and hit the ball in a brick wall at
        the top of the screen. Your goal is to destroy the brick wall.
        Each time the ball hits a brick, the brick disappears and you
        score points.
    - Reward: You score points by destroying bricks in the wall. The
        reward for destroying a brick depends on the color of the brick.
        Red - 7 points
        Orange - 7 points
        Yellow - 4 points
        Green - 4 points
        Aqua - 1 point
        Blue - 1 point
    - Actions: The possible actions are moving the paddle to the left
        or to the right.

Based on the description of the environment, act as an Explainable
Reinforcement Learning module and explain the estrategy that the
agent is taking. Highlight any smart strategies the agent might
be following.
"""
BREAKOUT_RAW_VIDEO_URL = "https://www.youtube.com/shorts/mh98w3auWMw"


BREAKOUT_SALIENCY_PROMPT = """
This is a video of an already trained reinforcement learning
agent playing an Atari game.
Now I'm going to give you some details about the game:

    - Environment: You move a paddle and hit the ball in a brick wall at
        the top of the screen. Your goal is to destroy the brick wall.
        Each time the ball hits a brick, the brick disappears and you
        score points.
    - Reward: You score points by destroying bricks in the wall. The
        reward for destroying a brick depends on the color of the brick.
        Red - 7 points
        Orange - 7 points
        Yellow - 4 points
        Green - 4 points
        Aqua - 1 point
        Blue - 1 point
    - Actions: The possible actions are moving the paddle to the left
        or to the right.

The video shows the saliency maps generated by GradCAM. They highlight
the sections of the frame that the agent was paying most attention to
when choosing the action.

Based on the description of the environment and the saliency maps,
act as an Explainable Reinforcement Learning module and explain the
estrategy that the agent is taking. Highlight any smart strategies
the agent might be following.
"""
BREAKOUT_SALIENCY_VIDEO_URL = "https://www.youtube.com/shorts/skR2QFa8jCw"


class GeminiBreakoutChat:
    def __init__(self, model: str) -> None:
        client = genai.Client(api_key=config.GEMINI_API_KEY)
        self._raw_chat = client.chats.create(model=model)
        self._saliency_chat = client.chats.create(model=model)
        self._console = Console()

    def generate_initial_analysis(self):
        print("Generating initial analysis...")
        raw_response = self._raw_chat.send_message(
            message=[
                types.Part(file_data=types.FileData(file_uri=BREAKOUT_RAW_VIDEO_URL)),
                types.Part(text=BREAKOUT_RAW_PROMPT),
            ]
        )

        saliency_response = self._saliency_chat.send_message(
            message=[
                types.Part(
                    file_data=types.FileData(file_uri=BREAKOUT_SALIENCY_VIDEO_URL)
                ),
                types.Part(text=BREAKOUT_SALIENCY_PROMPT),
            ]
        )
        self._print_responses(raw_response, saliency_response)

    def ask(self) -> None:
        question = input("You: ")
        raw_response = self._raw_chat.send_message(question)
        saliency_response = self._saliency_chat.send_message(question)
        self._print_responses(raw_response, saliency_response)

    def _print_responses(self, raw_response, saliency_response) -> None:
        raw_panel = Panel(raw_response.text, title="Raw video", border_style="green")
        saliency_panel = Panel(
            saliency_response.text,
            title="Video with Saliency Maps",
            border_style="blue",
        )
        columns = Columns([raw_panel, saliency_panel])
        self._console.print(columns)
